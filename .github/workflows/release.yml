name: Release & Tag Management

on:
  push:
    branches:
      - main
    paths-ignore:
      - '**.md'
      - 'docs/**'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.3)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - patch
          - minor
          - major

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'

    - name: Get latest tag
      id: get_latest_tag
      run: |
        git fetch --tags
        LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
        echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        echo "Latest tag: $LATEST_TAG"

    - name: Calculate next version
      id: calc_version
      run: |
        LATEST="${{ steps.get_latest_tag.outputs.latest_tag }}"
        LATEST="${LATEST#v}"

        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          if [ -n "${{ inputs.version }}" ]; then
            NEW_VERSION="${{ inputs.version }}"
          else
            RELEASE_TYPE="${{ inputs.release_type }}"
            IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST"
            case $RELEASE_TYPE in
              major) NEW_VERSION="$((MAJOR + 1)).0.0" ;;
              minor) NEW_VERSION="$MAJOR.$((MINOR + 1)).0" ;;
              patch) NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))" ;;
            esac
          fi
        else
          IFS='.' read -r MAJOR MINOR PATCH <<< "$LATEST"
          NEW_VERSION="$MAJOR.$MINOR.$((PATCH + 1))"
        fi

        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "New version: $NEW_VERSION"

    - name: Generate changelog
      id: changelog
      run: |
        LATEST_TAG="${{ steps.get_latest_tag.outputs.latest_tag }}"

        if [ "$LATEST_TAG" == "v0.0.0" ]; then
          CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
        else
          CHANGELOG=$(git log ${LATEST_TAG}..HEAD --pretty=format:"- %s (%h)" --reverse)
        fi

        echo "changelog<<EOF" >> $GITHUB_OUTPUT
        echo "$CHANGELOG" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Create Git tag
      run: |
        NEW_VERSION="${{ steps.calc_version.outputs.new_version }}"
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"
        git tag -a "v$NEW_VERSION" -m "Release v$NEW_VERSION"
        git push origin "v$NEW_VERSION"

    - name: Create GitHub Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ steps.calc_version.outputs.new_version }}
        release_name: Release v${{ steps.calc_version.outputs.new_version }}
        body: |
          ## What's Changed

          ${{ steps.changelog.outputs.changelog }}

          ## Installation

          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd ChatBOT
          pip install discord.py aiohttp chromadb openai pymupdf python-docx docx2txt
          ```

          ## Configuration

          Set the following environment variables:
          - `TOKEN`: Discord bot token
          - `OPENROUTER_API_KEY`: OpenRouter API key
          - `OPENAI_API_KEY`: OpenAI API key for embeddings

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ steps.get_latest_tag.outputs.latest_tag }}...v${{ steps.calc_version.outputs.new_version }}
        draft: false
        prerelease: false

  docker-build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: create-release
    if: success()

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build Docker image
      run: |
        docker build -t discord-chatbot:latest .
      continue-on-error: true
